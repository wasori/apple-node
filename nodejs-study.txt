[ 남자라면 서버개발을 할 줄 알아야 한다 ]

- 프론트엔드 껍데기만으로는 웹페이지를 구현할수없다.

- 서버를 알아야 모든 서비스를 구현할 수 있다.

- 서버개발 개쉬움 겁먹지마셈

- 웹 / 앱 서비스 동작방식 :  유저 ---- 서버 ( 웹툰좀요 ----> 웹툰 줌 ) => 유저 부탁 들어주는 프로그램 ( 고깃집 알바 느낌 )

- Q. 네이버 웹툰 서버 만들기? -> 누가 a 웹툰 요청하면 a 웹툰 보내주기 코드짜면 됨 ( 이게 끝임 )

- 비슷한코드 줄이고 모듈화하고 스키마 정의하고 등등 함

- 서버개발은 복붙과 암기가 반임

=================================================================================

[ Node.js의 장점이 뭐냐면 ]

- JS는 HTML 따까리임

- 자바스크립트는 웹브라우저가 실행해줌. 브라우저에는 자바스크립트 실행 엔진이 있음 (V8)-> 이 V8을 밖으로 똑 뗀게 Node.js임

- node.js를 다른이름으로 "JavaScript 런타임" ( javascript 실행기 )

- "어 그러면 JavaScript로 일반 프로그램도 만들 수 있겠네" -> vscode 도 js & node.js 로 만든거임 ㄷㄷ

- non-blocking / 비동기 잘함 ( 성능 굿 )

- ex) 영화예매 서비스?
 
- 일반적인 서버는 먼저 온 순서대로 차례차례 처리해주는게 일반적

- 중간에 처리시간이 너무 많은 요청이 오면? 그 뒷사람은 200초 걸림 ㄷㄷ

- node.js는? 요청부터 다 받고 처리시간이 빠른 순서대로 처리해버림 => 이걸 non-blocking / 비동기처리 라고 함

- 파일 입출력, db연결과 입출력 같은건 비동기처리 중요

- 이미지변환, 동영상 압축같은 cpu를 많이 갈궈야하는 작업은 힘들어함

- 간단한요청을 많이 처리해야할때 node.js서버가 좋음

=================================================================================

[ node.js , Express 설치, 세팅 ]

- 설치 후 터미널에 npm init -y 입력 -> 막 이상한 세팅 진행될거임

- 이건 라이브러리를 설치해서 쓰기위한 세팅임 (express 라이브러리 -> 서버만들기 쉬워짐)

- 그 후 npm install express 입력

- npm은 라이브러리 설치를 도와주는 간단한 프로그램


- // express 라이브러리를 사용하겠다는 뜻
- const express = require('express')
const app = express()

app.listen(8080,() => {
    console.log('http://localhost:8080 에서 서버 실행중')
})

app.get('/',(요청, 응답) => {
    응답.send('반갑다')
})

- 코드 저장 후 터미널에 node server.js 입력

- port란?

- 컴퓨터는 다른컴퓨터와 통신하기위해 만들어짐

- 웹서비스 접속해서 이용하는 행위는 다른사람 컴퓨터에 접속하는거와 다를바없음

- 네이버, 구글에 접속하는건 네이버 컴퓨터, 구글 컴퓨터에 접속하는 행위임

- 평상시에는 다른컴퓨터에 맘대로 접속할수가없음

- 컴퓨터에 구멍을 뚫어놓으면 접속을 할수있게 만들어주는데  그 구멍을 port라고함

- 모든 컴퓨터는 포트가 6만개정도있음 ㄷㄷ 코드 중 app.listen(8080, 어쩌구가 내 컴퓨터 PORT를 오픈하는 문법임

- 누군가가 http:// IPv4 주소 : PORT번호 입력하면 내 컴퓨터로 들어올수 있음

===========================================================================

[ 웹페이지 보내주려면 ( 라우팅 ) ]

- 다른사이트들은 어떻게 하는지 구경부터 하자

- 누가 /news로 접속하면 오늘의 뉴스를 보여주자

- app.get('/URL',(요청, 응답) => {
    응답.send('데이터~~')
})

- 서버개발은 그냥 라이브러리 사용법 암기가 끝임

- 콜백함수 ( 다른함수 파라미터에 들어가는 함수 )

- 1. 누가 /shop 접속시 app.get() 함수 실행됨

- 2. 그 다음 콜백함수 실행됨

- 웹페이지를 보내주고싶으면 html파일을 보내면 됨

- html을 보내려면 응답.sendFile(__dirname + '/index.html') 라고 쓰면됨

- __dirname : server.js 담긴 폴더

=======================================================================

[ 웹페이지에 디자인 넣으려면 ]

- 서버 계속 껏다 띄웠다 너무 귀찮음 -> nodemon을 사용하면 됨

- nodemon은 파일이 수정될때마다 알아서 자동으로 실행해주는 프로그램

- 터미널 npm install -g nodemon 설치 후 nodemon server.js 실행하면 됨

- 그냥 <link>로만 하면 안되고 우선 css파일이 있는 폴더를 server.js에 등록부터 해야함

- 폴더를 server.js에 등록해두면 폴더안의 파일들을 html에서 사용가능

- server.js에 app.use(express.static(__dirname + '/public')) 입력해서 사용가능

- .css , .js .jpg 같은것들을 static파일들이라고  함 ( 변동사항이 없기때문 )

- <link href="/main.css" rel="stylesheet"> css앞에 / 붙이고 원래는 그앞에 폴더명도 쓰는데 서버에 등록해놓으면 안써야 적용됨

===============================================================================

[MongoDB 호스팅받고 세팅하기 ]

- 게시판 만든다 했을때 유저 게시물 보관을 어디에 함? =>database에 보관

- 데이터베이스는 크게 두가지로 나뉜다. 관계형데이터베이스 vs 비관계형 데이터베이스

- 관계형데이터베이스 : 엑셀과 똑같이 데이터를 저장할수있다. sql문법으로 데이터 입출력해야함. 
                 
                                     최대한 중복을 제거하려고 함 ( 정규화 )

- 데이터의 정확도가 중요하다 -> 보통 관계형 데이터베이스 사용

- 비관계형 데이터베이스 :  다양한 형식으로 데이터 저장가능 . 정규화 그런거 안함 -> 빠르게 입출력 가능

- 빠른 입출력이 필요한 서비스에 좋다 ( 게시판, sns 등등 )

- 그렇다면 정확도는 관계형 베이스 입출력빠른게 중요하면 비관계형으로 쓰면되는가? 그건 아님

- 어떻게 활용하는가에 따라 다름

- MongoDB : SQL 배울 필요 없어서 쉬움
                      
 	     귀찮은 정규화 필요없음
                       
	     테이블 정의 필요없음

 - MongoDB는 Document Database 라고도 불림	     

- 데이터를 collection(폴더)안에 document(파일)를 저장하는 방식 -> 파일을 js object 자료형식으로 저장할수있음

- 사용방법 2개 1. 컴퓨터에 직접 설치 2. 클라우드 호스팅받기

=================================================================================

[ MongoDB와 서버 연결하려면 ]

- 유저가 데이터를 저장하려할때 데이터가 정상적인지 검사가 필요함. 출력할때도 마찬가지

- 그 담당은 서버가 담당할것임. 서버가 DB랑 통신하는게 일반적

- npm install mongodb@5 입력