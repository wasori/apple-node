[ 남자라면 서버개발을 할 줄 알아야 한다 ]

- 프론트엔드 껍데기만으로는 웹페이지를 구현할수없다.

- 서버를 알아야 모든 서비스를 구현할 수 있다.

- 서버개발 개쉬움 겁먹지마셈

- 웹 / 앱 서비스 동작방식 :  유저 ---- 서버 ( 웹툰좀요 ----> 웹툰 줌 ) => 유저 부탁 들어주는 프로그램 ( 고깃집 알바 느낌 )

- Q. 네이버 웹툰 서버 만들기? -> 누가 a 웹툰 요청하면 a 웹툰 보내주기 코드짜면 됨 ( 이게 끝임 )

- 비슷한코드 줄이고 모듈화하고 스키마 정의하고 등등 함

- 서버개발은 복붙과 암기가 반임

=================================================================================

[ Node.js의 장점이 뭐냐면 ]

- JS는 HTML 따까리임

- 자바스크립트는 웹브라우저가 실행해줌. 브라우저에는 자바스크립트 실행 엔진이 있음 (V8)-> 이 V8을 밖으로 똑 뗀게 Node.js임

- node.js를 다른이름으로 "JavaScript 런타임" ( javascript 실행기 )

- "어 그러면 JavaScript로 일반 프로그램도 만들 수 있겠네" -> vscode 도 js & node.js 로 만든거임 ㄷㄷ

- non-blocking / 비동기 잘함 ( 성능 굿 )

- ex) 영화예매 서비스?
 
- 일반적인 서버는 먼저 온 순서대로 차례차례 처리해주는게 일반적

- 중간에 처리시간이 너무 많은 요청이 오면? 그 뒷사람은 200초 걸림 ㄷㄷ

- node.js는? 요청부터 다 받고 처리시간이 빠른 순서대로 처리해버림 => 이걸 non-blocking / 비동기처리 라고 함

- 파일 입출력, db연결과 입출력 같은건 비동기처리 중요

- 이미지변환, 동영상 압축같은 cpu를 많이 갈궈야하는 작업은 힘들어함

- 간단한요청을 많이 처리해야할때 node.js서버가 좋음

=================================================================================

[ node.js , Express 설치, 세팅 ]

- 설치 후 터미널에 npm init -y 입력 -> 막 이상한 세팅 진행될거임

- 이건 라이브러리를 설치해서 쓰기위한 세팅임 (express 라이브러리 -> 서버만들기 쉬워짐)

- 그 후 npm install express 입력

- npm은 라이브러리 설치를 도와주는 간단한 프로그램


- // express 라이브러리를 사용하겠다는 뜻
- const express = require('express')
const app = express()

app.listen(8080,() => {
    console.log('http://localhost:8080 에서 서버 실행중')
})

app.get('/',(요청, 응답) => {
    응답.send('반갑다')
})

- 코드 저장 후 터미널에 node server.js 입력

- port란?

- 컴퓨터는 다른컴퓨터와 통신하기위해 만들어짐

- 웹서비스 접속해서 이용하는 행위는 다른사람 컴퓨터에 접속하는거와 다를바없음

- 네이버, 구글에 접속하는건 네이버 컴퓨터, 구글 컴퓨터에 접속하는 행위임

- 평상시에는 다른컴퓨터에 맘대로 접속할수가없음

- 컴퓨터에 구멍을 뚫어놓으면 접속을 할수있게 만들어주는데  그 구멍을 port라고함

- 모든 컴퓨터는 포트가 6만개정도있음 ㄷㄷ 코드 중 app.listen(8080, 어쩌구가 내 컴퓨터 PORT를 오픈하는 문법임

- 누군가가 http:// IPv4 주소 : PORT번호 입력하면 내 컴퓨터로 들어올수 있음

===========================================================================

[ 웹페이지 보내주려면 ( 라우팅 ) ]

- 다른사이트들은 어떻게 하는지 구경부터 하자

- 누가 /news로 접속하면 오늘의 뉴스를 보여주자

- app.get('/URL',(요청, 응답) => {
    응답.send('데이터~~')
})

- 서버개발은 그냥 라이브러리 사용법 암기가 끝임

- 콜백함수 ( 다른함수 파라미터에 들어가는 함수 )

- 1. 누가 /shop 접속시 app.get() 함수 실행됨

- 2. 그 다음 콜백함수 실행됨

- 웹페이지를 보내주고싶으면 html파일을 보내면 됨

- html을 보내려면 응답.sendFile(__dirname + '/index.html') 라고 쓰면됨

- __dirname : server.js 담긴 폴더

=======================================================================

[ 웹페이지에 디자인 넣으려면 ]

- 서버 계속 껏다 띄웠다 너무 귀찮음 -> nodemon을 사용하면 됨

- nodemon은 파일이 수정될때마다 알아서 자동으로 실행해주는 프로그램

- 터미널 npm install -g nodemon 설치 후 nodemon server.js 실행하면 됨

- 그냥 <link>로만 하면 안되고 우선 css파일이 있는 폴더를 server.js에 등록부터 해야함

- 폴더를 server.js에 등록해두면 폴더안의 파일들을 html에서 사용가능

- server.js에 app.use(express.static(__dirname + '/public')) 입력해서 사용가능

- .css , .js .jpg 같은것들을 static파일들이라고  함 ( 변동사항이 없기때문 )

- <link href="/main.css" rel="stylesheet"> css앞에 / 붙이고 원래는 그앞에 폴더명도 쓰는데 서버에 등록해놓으면 안써야 적용됨

===============================================================================

[MongoDB 호스팅받고 세팅하기 ]

- 게시판 만든다 했을때 유저 게시물 보관을 어디에 함? =>database에 보관

- 데이터베이스는 크게 두가지로 나뉜다. 관계형데이터베이스 vs 비관계형 데이터베이스

- 관계형데이터베이스 : 엑셀과 똑같이 데이터를 저장할수있다. sql문법으로 데이터 입출력해야함. 
                 
                                     최대한 중복을 제거하려고 함 ( 정규화 )

- 데이터의 정확도가 중요하다 -> 보통 관계형 데이터베이스 사용

- 비관계형 데이터베이스 :  다양한 형식으로 데이터 저장가능 . 정규화 그런거 안함 -> 빠르게 입출력 가능

- 빠른 입출력이 필요한 서비스에 좋다 ( 게시판, sns 등등 )

- 그렇다면 정확도는 관계형 베이스 입출력빠른게 중요하면 비관계형으로 쓰면되는가? 그건 아님

- 어떻게 활용하는가에 따라 다름

- MongoDB : SQL 배울 필요 없어서 쉬움
                      
 	     귀찮은 정규화 필요없음
                       
	     테이블 정의 필요없음

 - MongoDB는 Document Database 라고도 불림	     

- 데이터를 collection(폴더)안에 document(파일)를 저장하는 방식 -> 파일을 js object 자료형식으로 저장할수있음

- 사용방법 2개 1. 컴퓨터에 직접 설치 2. 클라우드 호스팅받기

=================================================================================

[ MongoDB와 서버 연결하려면 ]

- 유저가 데이터를 저장하려할때 데이터가 정상적인지 검사가 필요함. 출력할때도 마찬가지

- 그 담당은 서버가 담당할것임. 서버가 DB랑 통신하는게 일반적

- npm install mongodb@5 입력

================================================================================

[ MongoDB에서 데이터 출력하기 ( array / object 문법 ) ]

- mongoDB에서 데이터 입력

- Q.Document 1개에 게시물 100만개 넣어둬도 될듯?

- document 너무 크면 원하는거 찾기 어려움

- document 1개는 최대 16mb

- document 1개 == 엑셀 가로줄 1개

- /list 로 방문하면 DB에서 뽑은 글들 보여주기

- app.get('/list', async (요청, 응답) => {
    let result = await db.collection('post').find().toArray();
    console.log(result);
    응답.send('DB에 있던 게시물');
})

- await라는 걸 쓰려면 async를 써야함.

- (참고) 서버에서 console.log 쓰면 터미널에 출력됨.

- await : 다음 줄 실행하지 말고 잠깐 기다려주세요 라는 뜻

- js는 참을성이 없음 -> 처리가 오래걸리는 코드는 처리완료를 기다리지 않고 바로 다음 줄 실행해버림

- await를 쓰면 기다려줌.

- await 싫으면 db.collection('post').find().toArray().then(() => {               }) 이렇게 써도 됨

- 매우 자주쓰기때문에 그냥 외우면 된다.

- " 컬렉션의 모든 document 출력하는 법 "  => await db.collection('post').find().toArray();

- ( 참고 ) await은 정해진 곳만 붙일 수 있음 ( Promise 뱉는 곳 )

- ( 참고2 ) 무슨 DB를 써도 사용방법은 다 비슷함

- Q . 첫 게시물 제목만 뽑으려면?

- 데이터 시작부분만 보면 됨 [] {}

==============================================================================

[ 웹페이지에 DB데이터 꽂기 ( EJS, 서버사이드 랜더링 ) ]

- Q. html 파일에 서버데이터 어떻게 넣음? => template engine 쓰쇼 ( EJS ) //  npm install ejs

- app.set('view engine', 'ejs') 추가

- html파일에 데이터 넣고 싶으면 .ejs 파일로 만들면 가능

- .ejs파일들은 views 폴더 안에 넣는게 국룰이라서 만들어주면됨

- .ejs파일도 그냥 .html과 똑같음. html 파일인데 서버 데이털를 집어넣을수 있다 정도

- 유저에게 ejs 파일 보내는법 : 응답.render('list.ejs')

- ( 참고 ) 응답은 1개만 가능.

- 서버 데이터를 ejs파일에 넣으려면? 2가지 스텝

- 1. ejs파일로 데이터 전송 : 응답.render('list.ejs', { posts : result })

- 2. ejs 파일 안에서 <%= 데이터 이름 %>

- html 중간에 array, object 대충 넣으면 깨짐

- <div class="list-box">
        <h4><%= posts[0].title %></h4>  -> (참고) 이런걸 서버사이드 렌더링 이라 함
        <p>글내용임</p>
      </div>

- 클라이언트 사이드 렌더링 : 빈 html 파일 + 데이터 보내고 유저 브라우저에서 html생성하기

===============================================================================

[ 여러 글을 한 번에 출력해보자 ( EJS 문법2 ) ]

- ejs파일 안에서 자바스크립트 문법 그대로 사용가능 ( 반복문, if문 )

- 여기선 <scrip></script> 이런거 없어도 됨

- 여기서 쓸때는 <% %> 안에 넣어야함

- nav바 같은것도 100개 페이지에 계속 복붙할거임? => include() 문법 사용하면 다른 ejs 파일에 있던 html 복사해올수 있음

- <%- include('??.ejs') %> ??.ejs 파일내용을 복사해옴

- <%- include('nav.ejs' , { age : 20 }) %> 이렇게 하면 변수도 보낼 수 있음

- <%- %> <%= %>차이는 = 는 html 문법이 그대로 문자로 다 출력되고 -는 그 html이 적용된 모습으로 나온다


================================================================================

[ 서버가 유저와 통신하는 법 / RESTful API ]

- server : 요청이 들어오면 그걸 처리해주는 간단한 프로그램
 
- 요청 형식을 맞춰서 보내야 제대로 처리해줌. 1.method (GET, POST 등등 ) 2. url ( /어쩌구 )

- GET : 서버에게 데이터 달라고 할때

- POST : 서버에게 데이터를 보내고 싶을때

- PUT : 서버에 데이터 수정요청할때

- DELETE: 서버에 데이터 삭제요청할때

- app.get('/news', (요청, 응답) => {
    응답.send('오늘 비옴');
})

=> 다시 뜯어보기 : 어떤 유저가 '/news' 라는 url로 get요청을 날리면 함수 안의 코드를 실행해주세요.

- app.post('/news', (요청, 응답) => {
    응답.send('오늘 비옴');
})

=> get을 post로 바꿔버리면? 어떤 유저가 '/news'라는 url로 post요청을 날리면 함수 안의 코드를 실행해주세요.
=> 이런 서버의 하나의 기능들을 API라고 부르기도 한다.

- API : 프로그램 사용법 ( 서버 기능 )

- 유저가 서버로 요청을 어떻게 하는데? 가장 쉬운 GET요청 공간 -> 웹 브라우저 주소창
- POST요청은 <form>사용하면 됨

- Q. 유저는 어떤 url, method 적어야하는지 모르는데? : 보통 웹페이지에 숨겨놓음 ( 이걸 누르면 post요청되게 등등)

- REST API : 좋은 API 디자인하는 원칙 6개

- 1. Uniform Interface ( 일관성 ) : 일관성 있는 URL 이 좋음
                                           하나의 URL + method는 하나의 데이터를 보내야 함

- 2. Client-server 구분 : 유저에게 서버 역할 맡기지 마라

- 3. Stateless : 요청끼리 서로 의존성이 있으면 안됨

- 4. Cacheability : 요청은 캐싱이 가능해야함
                                 캐싱 : 자주 수신되는 자료들은 요청을 날리지 않고 하드에 저장해놓고 씀

- 5. Layered system : 요청 하나는 최종 응답전까지 여러 단계를 거쳐도 된다.

- 6. Code on demand : 서버는 유저에게 실행가능한 코드를 보내줄 수도 잇음

- 좋은 URL 작명 관습  : 1. 동사보다는 명사 위주로
                                       2. 띄어쓰기는 언더바_대신 대시-기호
		   3. 파일 확장자 쓰지 말기 ( .html ) 이런거
 		   4. 하위 문서들을 뜻할 땐 / 기호를 사용함 ( 하위폴더 같은 느낌 )

=================================================================================

[ 글 작성기능 만들기 1( POST 요청 ) ]

- Q. 글 작성 기능어캐만듬? 

- 1. 기능이 어떤식으로 동작하는지 한글로 정리 2. 한글로 코드를 번역

- 1. 유저가 글 작성페이지에서 서버로 전송. 2. 서버는 글을 검사 3. 이상없으면 DB에 저장

- 1. 유저가 글 작성페이지에서 서버로 전송.

- <form> <input> : <form class="form-box" action = "/URL~~" method="POST">

- <input name = "title">
   <input name = "content"> form 안에 input에도 name속성이 꼭 있어야함

- 2. 서버는 글을 검사

- app.post('/add', (요청, 응답) => {
    이 코드 실행됨. 요청.body 쓰면 유저가 보낸 데이터 출력 가능 
})

- 요청.body 쓰려면 
app.use(express.json())
app.use(express.urlencoded({
    extended: true
})) => 이것들 필요함 


- 이상없으면 글을 db에 저장

==============================================================================

[ 글 작성기능 만들기2 ( insertOne, 예외 처리 ) ]

- await db.collection('post').insertOne({ title : 1 })

- 응답.redirect('/list'); 다른페이지로 이동시키기

- 유저가 빈칸으로 보내면? 리스트에 이상하게 들어가게됨. 서버에서 걸러줘야함

- if (제목이 빈칸이면) {
        DB저장하지말고 뭐 경고문 보내주고
    }else {
        await db.collection('post').insertOne({title : 요청.body.title , content : 요청.body.content})
    }

 이런식으로 해야할듯

- db에 문제가있어서 실패하고 에러메세지 나올 수가 있음

- 에러시 다른 코드 실행은 try/catch

-try {
        if (요청.body.title == '') {
            응답.send('제목 입력안했는데?');
        } else {
            await db.collection('post').insertOne({
                title: 요청.body.title,
                content: 요청.body.content
            })
            응답.redirect('/list');
        }
    } catch (e) {
        응답.status(500).send('서버에러남')
    }

- statis(500)은 서버 잘못으로 인한 에러라는 뜻으로 에러코드를 전송해주는게 좋은 관습이다.

=================================================================================

[ 상세페이지 만들기 1 ( URL parameter ) ]

- /detail/글번호 입력하면 해당 글번호가 가진 글의 상세글을 보여줌

- 글이 100개있으면? => url 파라미터 문법사용. => 비슷한 /url 가진 api 여러개 만들수있음 

- app.get('/detail/:aaaa', () => {
    
}) => "유저가 :aaaa자리에 아무 문자나 입력시"

- 모든문자가 같은페이지로 가는데? => 유저가 /detail/1로 접속하면 _id가 1인 글 내용을 ejs파일로 보내기

- 상세페이지 기능 1.유저가 /detail/어쩌구 접속하면
                             2. {_id : 어쩌구 } 글을 DB에서 찾아서
	           3. ejs 파일에 박아서 보내줌

- 유저가 글 id를 어떻게 url에 씀? => 글 제목 클릭시 이동하게 만드는 링크를 만드는거임

- 2번기능 app.get('/detail/:aaaa', async(요청, 응답) => {
   	 	await db.collection('post').findOne({a : 1}) 
    		응답.render('detail.ejs');
	})  => {} 데이터를 가진 document 1개 찾아옴

- await db.collection('post').find().toArray(); 모든 document를 가져옴

- 요청.params 쓰면 url 파라미터 자리에 들어간 문자를 알수있다

================================================================================

[ 상세페이지 만들기 2 ( 링크 만들기 ) ]

- ( 참고 ) url 파라미터는 여러개 넣어도 됨 /:123/:123

- 유저가 글 id를 어떻게 url에 씀? => 글 제목 클릭시 이동하게 만드는 링크를 만드는거임 -> <a>태그

- 서버기능을 만들었으면 예외케이스들을 처리해주는게 좋음.

- ex) 누가 url 파라미터에 이상한거적어서 접속하면 어떡할래

- 응답.status(400).send('이상한 url 입력함');

- 5xx : 서버문제 , 4xx : 유저문제

- Q. _id 길이는 맞는데 틀렸을 경우?

- try catch 만으로 잡을수 없음

- 직접 악성유저가 되어 테스트해보는게 좋음

- try {
        let result = await db.collection('post').findOne({
            _id: new ObjectId(요청.params.id)
        });
        if (result == null) {
            응답.status(404).send('이상한 url 입력함');
        }
        응답.render('detail.ejs', {
            result: result
        });
    } catch (e) {
        console.log(e);
        응답.status(404).send('이상한 url 입력함');
    }

================================================================================

[ 수정 기능 만들기 1 ]

- 게시판기능이랑 비슷함

1. 글마다 수정버튼 누르면 수정페이지로 이동한다

2. 수정페이지엔 기존 글이 채워져있다.

3. 전송누르면 입력한 내용으로 db글 수정

- document 수정하고 싶으면 updateOne()

- db.collection('post').updateOne({a : 1}, { $set : { a : 2}});

- a : 1  도큐먼트를 찾아서 a : 2 로 교체해준다

- ( 팁 ) 서버에서 정보를 찾을 수 없다면 유저에게 보내라고 하거나 / DB에서 꺼내보거나

- 전송버튼 누르면 서버로 전송, 서버는 확인 후 DB수정

- <form class="form-box" action = "/edit" method="POST">

- 수정기능은 PUT method , 삭제기능은 DELETE method 쓰는게 좋은 관습

- <form>에서는 원래 GET, POST만 가능. 굳이 PUT 쓰고싶으면 AJAX나 외부 라이브러리 사용해야함

- app.post('/edit', async (요청, 응답) => {

    await db.collection('post').updateOne({ 수정할 document 정보 }, { $set : { 수정할 내용 }});

})

- 유저가 입력칸에 적은 글들 : 요청 . body

- 직접예외처리도 해보면 좋음 (유저가 _id 이상하게 보내면? 수정할 글 내용이 없으면? 유저가 title, content말고 다른 내용으로 보내면? 이상한 에러로 수정이 실패하면? 등등 )

- (팁) 수정결과 확인가능 : result변수에 담아서 확인

-input 화면 숨기기 가능

==============================================================================

[ 수정기능 만들기 2 ( method - override, MongoDB 수정문법 추가 ) ]

- <form> 써서 PUT, DELETE 요청하는법

- 세팅이 좀 필요함 1. npm install method-override
                              2. const methodOverride = require('method-override')
	                 app.use(methodOverride('_method')) 위에 추가
	            3. <form class="form-box" action = "/edit?_method=PUT" method="POST">
                                   /요청URL 뒤에 ?_method=PUT 추가

- updateOne 추가문법 
await db.collection('post').updateOne({
        _id: 1
    }, {
        $inc: {
            like : 1
        }
    });

- $inc : like를 1올려주시오 . -2 적으면 2씩 줄어듦
- $mul : 기존값에 곱하라는 뜻
- $unset : 기존 필드값 삭제 ( 거의 안쓰니 알아만 두자 )

- Q. 동시에 여러개 document 수정?
- await db.collection('post').updateMany({
        _id: 1
    }, {
        $inc: {
            like : 1
        }
    }); => id가 1인거 전부다 적용됨

- 조건식 사용도 가능

- Q.LIKE 항목이 10이상인 document 전부 수정?

- await db.collection('post').updateMany({
        like : {$gt : 10}  ( like > 10 이라는 뜻  $gte 는 >= 이하는 $lt, $lte like != 는 $ne)
    }, {
        $inc: {
            like : 1
        }
    });

===============================================================================

[ 삭제기능 만들기 (AJAX, query string ) ]

- 1. 글 삭제버튼 누르면 서버로 요청

- 2. 서버는 확인 후 해당 글 DB에서 삭제 ( ajax 사용 )

- 브라우저 주소창, <a><form> -> 서버로 GET,POST 요청가능 단점 : 계속 새로고침 해야함

- AJAX쓰면 새로고침없이도 서버로 요청 가능

-  fetch('/url') -> GET요청

- POST요청은? : fetch('/url',{
            method : 'POST', ( put, delete 동일 )
            headers :{
              'Content-Type':'application/json'
            },
            body : '데이터' -> 문자랑 숫자만 가능. object, array 보내려면? JSON.stringify({a : 1})
        })

- 서버로 데이터 보내는 다른 방법 : 1. query string 2. URL parameter

- url parameter ( /abc/:id )

- 유저가 서버로 내 이름 전송하려면? : /abc/홍길동 => console.log(요청.params)

- query string : ( /abc?데이터이름 = 데이터값 ) ex ( /abc?age=20 ) => console.log( 요청.query )

- 여러개 넣으려면 & 로연결 /abc?age=20&name=홍길동

- 단점은 URL에 보이기때문에 보안에 취약.

===============================================================================

[ 삭제기능 만들기2 (dataset) ]

- document의 _id 같은거를 서버로 보내는게 좋을듯

- 삭제버튼 누르면 삭제할 document _id도 보내기

- fetch 에서delete는 가끔 body가 안갈경우가 있어서 url parameter나 query string이 좋을듯

- script안에서 ejs문법 사용하고싶으면 문자안에 담아야함

- document.querySelectorAll('.delete')[0].addEventListener('click', function () {
        fetch('/delete?docid=<%=posts[0]._id%>',{
          method:'DELETE'
        })
      })

- app.delete('/delete', async (요청, 응답) => {
    console.log(요청.query)
    await db.collection('post').deleteOne()
})

- ajax 요청 사용시 응답.redirect , 응답.render 사용안하는게 나음 (다른페이지 보내는거)

- html에 _id 숨겨놨다가 가져오는법

- <span class="delete" data-어쩌구="저쩌구">🗑️</span>

- "어쩌구"라는 이름의 "저쩌구"를 <html>안에 저장해주세요

- <span class="delete" data-id="<%= posts[i]._id %>">🗑️</span>

- document.querySelectorAll('.delete')[0].addEventListener('click', function (e) {
        fetch('/delete?docid='+ e.target.dataset.id,{
          method:'DELETE'
        })
      })

- Q. 삭제는되는데 왜 새로고침 해야 반영됨?

- 버튼 누르면 html도 없애라고 코드짜면 됨

================================================================================

[ 삭제기능 만들기 3 ( AJAX 추가 내용 ) ]

- AJAX 사용시 서버가 보낸 데이터도 출력가능

fetch('/delete?docid='+ e.target.dataset.id,{
          method:'DELETE'
        })
        .then((r)=>r.text()) -> 서버가 보내는게 문자일경우 ( array 는 r.json() )
        .then((r)=>{console.log(r)})

- GET요청 시 db 데이터보내는 API 만들어놨다면 AJAX로 당연히 가져올수 있음

- 클릭시 상세페이지 HTML 말고 글제목 & 내용만 AJAX로 가져온다면?

- HTML 보여주는 법 1. 서버사이드랜더링 2. 클라이언트사이드랜더링 ( AJAX )

- AJAX 실패하는 경우엔? 예외처리

- fetch('/URL')
.then((r)=>{
  if(r.status == 200) {
    return r.json()
  } else {
    //서버가 에러코드전송시 실행할코드
  }
})
.then((result)=>{ 
  //성공시 실행할코드
}).catch((error)=>{
  //인터넷문제 등으로 실패시 실행할코드
  console.log(error)
})

- axios 사용하면 코드 간결해짐

- 삭제버튼 누르면 그버튼 상위 상위 html 안보이게 해놓으면 된다

- for (var i = 0; i < '<%=posts.length%>'; i++) {
        document.querySelectorAll('.delete')[i].addEventListener('click', function (e) {
          fetch('/delete?docid=' + e.target.dataset.id, {
            method: 'DELETE'
          })
            .then((r) => r.text())
            .then((r) => { 
              e.target.parentElement.parentElement.style.display = 'none';
            })
        })
      }

===============================================================================

[ 글목록 여러 페이지로 나누기 ]

- pagination ( 페이지 쪼개기 )

- 페이지이동버튼 만들고

- 1번 버튼 누르면 1~5번글 2번 버튼 누르면 6~ 10번글 보여줌

- url 작명 해놓자 ( 1번 : /list/1 2번 : /list/2 3번 : /list/3 ) => url parameter

- let result = await db.collection('post').find().limit(5).toArray(); : 위에서 5개만 가져옴

- 2번 버튼은? = let result = await db.collection('post').find().skip(5).limit(5).toArray(); : 5개를 생략하고 5개를 가져옴

- 최종 : let result = await db.collection('post').find().skip((요청.params.id - 1) * 5).limit(5).toArray();

- 그런데 .skip()성능이 안좋음. 큰숫자 넣으면 오래걸릴수도있음

- 다른 페이지네이션 방법도 있음

- let result = await db.collection('post').find({_id:{$gt : 방금본 마지막 게시물 _id}}).limit(5).toArray(); 

-> 다음페이지 기능임 . 장점 : 매우빠름 단점 : 1페이지에서 3페이지 이동 불가. 무조건 다음페이지밖에 안됨

================================================================================

[ 회원기능 만들기 : JWT, session, OAuth 설명 ]

- session : 입장권에 session id 하나만 적혀있음

- 유저가 로그인하면 서버 메모리나 db에 기록해둠

- 세션 id를 db와 비교

- 장점 : 유저의 GET/POST 요청마다로그인상태 체크가능

- 단점 : DB쨩이 힘들어함

-token 방식 : JWT ( JSON WEB TOKEN )

- 유저가 로그인하면 입장권을 주는데 여기에 ID, 로그인날짜 , 유효기간 등 적어서 암호화해서 발급함

- 유저가 입장권 제출하면 서버에서 검사하고 별문제 없으면 데이터 줌

- 장점: db부담 적음 ( 유저가 많거나 마이크로서비스 운영중이면 편함 )

- 단점 : 나쁜놈이 로그인하는걸 막을방법이 없음

- OAuTH : A사이트에 유저가 로그인하면 사용권한이 있는데 b사이트를 운영하는 내가 잠깐 빌릴 수 있음

- a사이트 정보를 대여가능. => 소셜로그인 ( 구글로그인, 네이버로그인 )

===============================================================================

[ 회원기능 만들기 : passport, 로그인 기능 ]

- session방식 1. 가입 기능
                         2. 로그인 기능
                         3. 로그인 완료 시 세션만들기
                         4. 로그인 완료시 유저에게 입장권 보내준다
                         5. 로그인 여부 확인하고싶으면 입장권 까봄

- passport 라이브러리 써서 구현

- npm install express-session passport passport-local

- passport 라이브러리 셋팅  

- const session = require('express-session')
const passport = require('passport')
const LocalStrategy = require('passport-local')

app.use(passport.initialize())
app.use(session({
  secret: '암호화에 쓸 비번', -> session의 document id는 암호화해서 유저에게 보냄
  resave : false, -> 유저가 서버로 요청할 때마다 세션 갱신할건지 ( 대부분 false )
  saveUninitialized : false -> 로그인 안해도 세션 만들것인지 ( 대부분 false )
}))

app.use(passport.session())

- 가입기능 만들기 ( 직접 해보쇼 )

- 로그인 기능

- /login 접속시 로그인페이지 보여주기

- passport 사용하면 name 속성 이름 맞춰야함

- <input name = "username">
   <input name = "password">

- 로그인하고 전송 누르면 db에있는지 확인하고 있으면 세션 만들어줌

- 라이브러리 사용법 코드 복붙

- passport.use(new LocalStrategy(async (입력한아이디, 입력한비번, cb) => {
    let result = await db.collection('user').findOne({ username : 입력한아이디})
    if (!result) {
      return cb(null, false, { message: '아이디 DB에 없음' })
    }
    if (result.password == 입력한비번) {
      return cb(null, result)
    } else {
      return cb(null, false, { message: '비번불일치' });
    }
  }))

- 실행하고싶으면 passport.authenticate('local')() 사용하면된다

- (참고) 아이디/ 비번외에 다른것도 제출받아서 검증가능 : passReqToCallback 옵션 찾아보기

- app.post('/login', async (요청, 응답, next) => {
    passport.authenticate('local', (error, user, info) => {
        if (error) return 응답.status(500).json(error);
        if (!user) return 응답.status(401).json(info.message);
    })(요청, 응답, next)
    요청.logIn(user, (err) => { -> 실행하면 세션 만들어줌
        if (err) return next(err);
        응답.redirect("/list/1")
    })
})

=============================================================================

[ 회원기능 만들기 2 ]

- 3. 로그인 시 세션만들기 ( 아이디, 유효기간 적힌 document )

- passport.serializeUser() 사용하면 자동으로 해결

- passport.serializeUser((user,done) => {
    process.nextTick(()=>{
        done( null, { id : user._id, username : user.username} )
    })
})

- 요청.logIn() 가 실행될때마다 자동 실행됨. 저런 내용 기록된 세션 document 만들어주고 쿠기도 알아서 보내줌

- process.nextTick() => 내부 코드를 비동기적으로 처리해줌

- 세션 document를 db에 발행해줌. ( 지금은 passport와 db가 연결이 안돼있어서 메모리에 저장 )

- 이제 로그인 시 세션 document 발행해줌. 그리고 그 document의 _id를 쿠키에 적어서 보내줌

- 유효기간은 아무것도 안건들이면 기본 2주로 설정돼있을듯

- app.use(passport.initialize())
app.use(session({
    secret: '암호화에 쓸 비번',
    resave: false,
    saveUninitialized: false,
    cookie : { maxAge : 60 * 60 * 1000} --> 여기에 이것 추가 (이렇게 하면 세션시간은 1시간 )
}))

- 4. 세션 id 담긴 쿠키 보내주기

- 유저가 보낸 쿠키 분석

- passport.deserializeUser((user,done) => {
    process.nextTick(()=>{
        done( null, user )
    })
})

- 유저가 성공적으로 로그인하면 쿠키를 만들어서 유저 브라우저로 보내줌

- 쿠키는 서버로 요청할때마다 자동 전송됨 그 쿠키를 까서 확인해보는 코드가 저코드

- 쿠키가 이상이 없으면 현재 로그인된 유저 정보 알려줌

- 아무데서나 요청.user 쓰면 로그인된 유저 정보 알려줌.

-문제점 : 세션 document에적힌 유저 정보를 그대로 요청.user에 담아줌 ( 오래되면 사실과 다를수도있음 )

- passport.deserializeUser(async(user,done) => {
    let result = await db.collection('user').findOne({_id: new ObjectId(user.id)})
    delete result.password; => 비번도 같이 날아와서 삭제하는게 좋아보임
    process.nextTick(()=>{
        done( null, result )
    })
}) 이렇게 하는게 나을듯

- 아마 서버 재시작하면 로그인도 풀릴거임 ( db가아니라 서버 메모리에 보관중이라그럼 )

==============================================================================

[ 회원기능 만들기 3 ( 가입가능, connect-mongo )

- 가입기능 만들기 ( 전송 누르면 db에 아이디/비번 저장하면 끝 )

- app.post('/register', async(요청, 응답) => {
    await db.collection('user').insertOne({
        username : 요청.body.username,
        password : 요청.body.password
    })
    응답.redirect('/')
})

- 여기서 username이 빈칸이면? username이 이미 db에 있으면? password가 짧으면? 등등의 예외처리도 해보셈

- 비번은 암호화해서 저장하는게 좋음 ( hashing : 문자 -> 랜덤문자 변환)

- md5, sha1 -> 잘 사용 안함 SHA3-256 , SHA3-512, bcrypt, scrypt, argon2 ... 등등 사용하셈

- 우린 bcrypt 알고리즘을 써보자 : npm install bcrypt 설치 후

- const bcrypt = require('bcrypt') 코드 추가

- await bcrypt.hash('문자',15) : 문자를 15개문자로 해싱해준다 (1초정도 걸릴듯) 보통 10으로 함

- 해싱할때 비번만가지고 해싱하는것보단 뒤에 랜덤문자를 추가해서 해싱하는것이 더 안전하다

- 여기서 뒤에 랜덤문자를 salt 라고 부름 :   lookup table attack / rainbow table attack 공격을 막을수있음

- salt도 같이 db에 저장되는데 이것만 따로 보관할수도 있음. 이걸 pepper라고 부름

- 앞에 만들었던 로그인 체크 코드 일부 수정해야함

- passport.use(new LocalStrategy(async (입력한아이디, 입력한비번, cb) => {
    let result = await db.collection('user').findOne({
        username: 입력한아이디
    })
    if (!result) {
        return cb(null, false, {
            message: '아이디 DB에 없음'
        })
    }
    if (result.password == 입력한비번) { <====== 여기 수정 ( 입력한비번도 해싱해서 비교해봐야함 )
        return cb(null, result)
    } else {
        return cb(null, false, {
            message: '비번불일치'
        });
    }
}))

- 비교해주는 코드 : await bcrypt.compare(입력한비번,result.password)

- passport.use(new LocalStrategy(async (입력한아이디, 입력한비번, cb) => {
    let result = await db.collection('user').findOne({
        username: 입력한아이디
    })
    if (!result) {
        return cb(null, false, {
            message: '아이디 DB에 없음'
        })
    }
    
    if (await bcrypt.compare(입력한비번,result.password)) {
        return cb(null, result)
    } else {
        return cb(null, false, {
            message: '비번불일치'
        });
    }
}))

- session을 db에 저장하는법 

- 지금은 메모리저장돼있어서 새로고침하면 로그아웃됨

- connect-mongo 라이브러리 설치 : npm install connect-mongo

- 위코드에 const MongoStore = require('connect-mongo') 추가

- app.use(session({
    secret: '암호화에 쓸 비번',
    resave: false,
    saveUninitialized: false,
    cookie: {
        maxAge: 60 * 60 * 1000
    },
    store : MongoStore.create({    <== 추가추가
        mongoUrl : 'db접속용 url',
        dbName : 'forum'
    })
}))

===============================================================================

[ 환경변수 / 미들웨어 ]

- 환경변수 : 개발자나 컴퓨터에 따라 달라져야하는 변수 ( 암호화에 쓸비번, mongoDB URL, 포트번호 같은 것들 )

- 환경변수는 별도 파일에 보관하는게 나중에 편리 ( 소스코드 공유할때나 배포할때나 소스코드 편하게 올릴 수 있음 )

- 환경변수를 다른파일에 보관하려면 npm install dotenv 입력

- 코드 위에 require('dotenv').config(); 추가

- 프로젝트에 파일추가에 .env 추가 ( 환경변수 보관용 파일 )

- ex) env 파일에 PORT = 8080 입력

         server.js 에 포트번호 부분을 8080 에서 process.env.PORT로 변경
 
         문자열 저장할때는 "" 가 좋음

- 주의해야할 점 : .env파일은 깃헙에 올리지말자.

- middleware : api에 자주 출현하는 코드..매번복붙하기 귀찮다. -> 함수를 사용

- function checkLogin (요청, 응답, next){
    if(!요청.user){
        응답.send('로그인하세요')
    }
}

app.get('/', checkLogin , (요청, 응답) => {   <--- 함수가 요청과 응답 사이에 실행됨 ( 미들웨어 )
    응답.sendFile(__dirname + '/index.html')
})

- app.get('/' 여기로 요청이 들어오면, 미들웨어 함수 먼저 실행, 그다음 함수안 코드 실행

- 미들웨어로 사용하려면 function 함수에 파라미터 next를 추가해야한다

- 미들웨어 함수에선 요청, 응답 자유롭게 사용가능

- function checkLogin (요청, 응답, next){
    요청.body or 응답.redirect 등등
    if(!요청.user){
        응답.send('로그인하세요') --> 응답해버리면 밑에 함수 실행 안됨
    }
    next() -> " 미들웨어 코드 실행 끝낫으니 다음으로 이동해주세요 "
}

- ( 참고 1 ) app.get('/', (요청, 응답, next) => {} ,(요청, 응답) => {
    응답.sendFile(__dirname + '/index.html')
})  ==> 함수 바로넣기 가능

- ( 참고 2 ) 미들웨어 여러개 넣기 가능

- app.get('/', [함수1, 함수2, 함수3 ]  , (요청, 응답) => {
    응답.sendFile(__dirname + '/index.html')
})  ==> 함수 바로넣기 가능

-  API 100개에 모두 적용하고싶다면?

- app.use(checkLogin) : 이 코드 밑에있는 모든 api는 checkLogin 미들웨어 전부 적용된다.

- app.use('/URL', checkLogin) : /URL로 시작하는 모든 곳에 적용해줌

=============================================================================

[ 이미지 업로드 기능 만들기 1 ( AWS S3 세팅 ) ]

- 보통 AWS S3같은 곳에 이미지 저장해둠 

- 엑세스 키 : AKIA4ETIBJXOEFOH6Y2B

- 비밀 엑세스 키 : vtCObLLoraC+4ZcB64ewAZxjVoaM+YmZUPvpDakV

- arn : arn:aws:iam::834515586524:user/wasori1

- Q. S3에 있던 이미지는 HTML에 어떻게 보여줌?

- 이미지 저장할때 URL 발급해줌

- 그거 DB에 보관해뒀다가 필요할 때 <img>에 넣기

- 1. 글작성페이지에 이미지 <input>

- write.ejs 에 <input type="file" name = "img1" accept="image/*"> 추가

- <form class="form-box" action = "/add" method="POST" enctype="multipart/form-data"> 추가


- 2. 서버는 이미지 받으면 s3에 업로드

- multer / formidable 라이브러리 쓰면 편함

- npm install multer multer-s3 @aws-sdk/client-s3 : 
- multer : 유저가 보낸 파일다루기 쉬워짐
- multer-s3 : 그 파일을 s3에 쉽게 업로드 도와줌
- @aws-sdk/client-s3 : aws 사용시 필요

- 코드 상단에 추가
- const { S3Client } = require('@aws-sdk/client-s3')
const multer = require('multer')
const multerS3 = require('multer-s3')
const s3 = new S3Client({
  region : 'ap-northeast-2',
  credentials : {
      accessKeyId : 'IAM에서 발급받은 액세스키',
      secretAccessKey : 'IAM에서 발급받은 시크릿키'
  }
})

const upload = multer({
  storage: multerS3({
    s3: s3,
    bucket: '님들버킷이름',
    key: function (요청, file, cb) {
      cb(null, Date.now().toString()) //업로드시 파일명 변경가능
    }
  })
})

- upload.single('input이름') 함수 실행하면 s3에 업로드됨

- 전송버튼 누르면 /add로 post요청이 가기 때문에 해당 코드에 미들웨어 추가

- app.post('/add', upload.single('img1'), async (요청, 응답) => {

- name = "img1"가진 이미지가 들어오면 s3에 자동 업로드 해줌

- 업로드 완료시 이미지의 url도 생성해줌. -> 요청.file안에 들어있음

- Q. 이미지 여러장 업로드는?

- <input type="file" name = "img1" accept="image/*" multiple> : multiple 추가

- 그럴때는 upload.single 이 아니라 upload.array 라고 해야함 최대 이미지 개수까지 지정가능

- 요청.files에서 확인가능


- 3. 이미지 url은 db에 글과 함께 저장

- 코드 추가

- app.post('/add', upload.single('img1'), async (요청, 응답) => {
    try {
        if (요청.body.title == '') {
            응답.send('제목 입력안했는데?');
        } else {
            await db.collection('post').insertOne({
                title: 요청.body.title,
                content: 요청.body.content,
                img : 요청.file.location <<<<<<<<<<<<<<<<<<<<
            })
            응답.redirect('/list');
        }
    } catch (e) {
        console.log(e);
        응답.status(500).send('서버에러남');
    }
})

- 4. 이미지 필요하면 db에 있던 url 꺼내서 html에 넣기

- (숙제) 상세페이지에서 db에있던 이미지도 꺼내서 보여주기

- 이미지 업로드 에러처리 하려면 미들웨어 말고 안에서 코드실행 하는게 나음

-app.post('/add', async (요청, 응답) => {

    upload.single('img1')(요청, 응답 , async (err) =>{
        if(err) return 응답.send('업로드에러')
        try {
            if (요청.body.title == '') {
                응답.send('제목 입력안했는데?');
            } else {
                await db.collection('post').insertOne({
                    title: 요청.body.title,
                    content: 요청.body.content,
                    img : 요청.file.location
                })
                응답.redirect('/list');
            }
        } catch (e) {
            console.log(e);
            응답.status(500).send('서버에러남');
        }
    })

이런느낌